[toplevel]

# Initial functions from https://github.com/awslabs/awscli-aliases

whoami = sts get-caller-identity

list-instances = ec2 describe-instances \
    --filter Name=instance-state-name,Values=running \
    --output table \
    --query 'sort_by(Reservations[].Instances[].{ID: InstanceId,IP: PrivateIpAddress,Name: Tags[?Key==`Name`].Value | [0] || `None`,Type: InstanceType, Platform: Platform || `linux`, Lifecycle: InstanceLifecycle || ``}[], &Name)'

list-ips = !f() {
    aws ec2 describe-instances \
    --filter Name=instance-state-name,Values=running Name=tag:Name,Values="*$1*" \
    --query 'Reservations[].Instances[].[PrivateIpAddress]' \
    --output text; }; f

list-volumes= ec2 describe-volumes \
    --query 'Volumes[].{VolumeId: VolumeId,State: State,Size: Size,Name: Tags[0].Value,AZ: AvailabilityZone}' \
    --output table

amazon-linux-amis = ec2 describe-images \
    --filter \
      Name=owner-alias,Values=amazon \
      Name=name,Values="amzn-ami-hvm-*" \
      Name=architecture,Values=x86_64 \
      Name=virtualization-type,Values=hvm \
      Name=root-device-type,Values=ebs \
      Name=block-device-mapping.volume-type,Values=gp2 \
    --query "reverse(sort_by(Images, &CreationDate))[*].[ImageId,Name,Description]" \
    --output text

list-sgs = ec2 describe-security-groups --query "SecurityGroups[].[GroupId, GroupName]" --output text

sg-rules = !f() { aws ec2 describe-security-groups \
    --query "SecurityGroups[].IpPermissions[].[FromPort,ToPort,IpProtocol,join(',',IpRanges[].CidrIp)]" \
    --group-id "$1" --output text; }; f

tostring =
  !f() {
    cat "${1}" | jq 'tostring'
  }; f

# List or set your region
region = !f() { [[ $# -eq 1 ]] && aws configure set region "$1" || aws configure get region; }; f

docker-ecr-login =
  !f() {
    region=$(aws configure get region)
    endpoint=$(aws ecr get-authorization-token --region $region --output text --query authorizationData[].proxyEndpoint)
    passwd=$(aws ecr get-authorization-token --region $region --output text --query authorizationData[].authorizationToken | base64 --decode | cut -d: -f2)
    docker login -u AWS -p $passwd $endpoint
  }; f

user-data =
  !f() {
    aws ec2 describe-instance-attribute --instance-id "${1}" --attribute userData --output text --query "UserData.Value" | base64 --decode | zcat
  }; f
